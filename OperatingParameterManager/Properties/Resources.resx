<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ERRMSG_INTERNAL_PROCESSING_ERROR_002" xml:space="preserve">
    <value>INTERNAL PROCESSING ERROR 002: A parameter type information element format is incorrect; the field count differs from the expected field count.{3}    Expected field count = {0}{3}    Actual field count   = {1}{3}    Actual detail record = {2}{3}</value>
    <comment>Under normal conditions, this message is never shown, because this error should never happen in a correctly coded program, unless the program file is corrupted.</comment>
  </data>
  <data name="ERRMSG_INTERNAL_PROCESSING_ERROR_004" xml:space="preserve">
    <value>INTERNAL PROCESSING ERROR 004: A parameter type information element name is incorrect; the {0} value is undefined and unsupported.{1}</value>
    <comment>Under normal conditions, this message is never shown, because this error should never happen in a correctly coded program, unless the program file is corrupted.</comment>
  </data>
  <data name="ERRMSG_INTERNAL_PROCESSING_ERROR_005" xml:space="preserve">
    <value>INTERNAL PROCESSING ERROR 005: Type information for the {0} parameter cannot be found in the embedded {1} resource.{2}</value>
    <comment>Under normal conditions, this message is never shown, because this error should never happen in a correctly coded program, unless the program file is corrupted.</comment>
  </data>
  <data name="ERRMSG_INVALID_PARAMETER_TYPE" xml:space="preserve">
    <value>Enumeration {0} value of {1} is invalid.</value>
    <comment>The implementation of abstract method IsValueValid in a class derived from OperatingParameterBase was called when the private _enmParameterType member of the concrete instance had a value that cannot be converted to the type specified to the definition of the concrete instance. Since constructors of derived classes take generics, the type is unknown at design time.</comment>
  </data>
  <data name="ERRMSG_UNDEFINED_ARGNAME" xml:space="preserve">
    <value>Argument name '{0}' is undefined.</value>
    <comment>Instance method GetParameterByName on an OperatingParametersCollection object formats the error message to report being called with an invalid (undefined) argument name.</comment>
  </data>
  <data name="MESSAGE_APPSETTINGS_FOOTER" xml:space="preserve">
    <value>Seetings count = {0}:{1}</value>
    <comment>Static method ListAllAppSettings method on the static Utl class formats a summary of the application settings from this template.</comment>
  </data>
  <data name="MESSAGE_APPSETTINGS_HEADER" xml:space="preserve">
    <value>{1}Application Setting Defaults for {0}:{1}</value>
    <comment>Static method ListAllAppSettings method on the static Utl class formats a preamble for the list of application settings from this template.</comment>
  </data>
  <data name="MESSAGE_APPSETTING_VALUE" xml:space="preserve">
    <value>    AppSetting # {0,2}: Name         = {1}{4}                     PropertyType = {2}{4}                     DefaultValue = {3}{4}</value>
    <comment>Static method ListAllAppSettings method on the static Utl class formats details about each application setting from this template.</comment>
  </data>
  <data name="MESSAGE_INVALID_PARAMETER_TYPE_VALUE" xml:space="preserve">
    <value>{0}{4}    Column Name  = {1}{4}    Column Index = {2}{4}    Whole Record = {3}{4}</value>
    <comment>The ParameterTypeInfo constructor formats an exception report from this template when it encounters an unexpected parameter type in the embedded resource stream.</comment>
  </data>
  <data name="MESSAGE_RESOURCE_NAMES_DETAIL" xml:space="preserve">
    <value>    Resource # {0}: {1}</value>
    <comment>A method on the static Utl class formats a detail item in the list of resources stored in an assembly from this template.</comment>
  </data>
  <data name="MESSAGE_RESOURCE_NAMES_FOOTER" xml:space="preserve">
    <value>{1}Count of resources stored in assembly = {0}{1}</value>
    <comment>A method on the static Utl class formats a report summary for the list of resources stored in an assembly from this template.</comment>
  </data>
  <data name="MESSAGE_RESOURCE_NAMES_HEADER" xml:space="preserve">
    <value>{1}Resources Stored in Assembly {0}:{1}</value>
    <comment>A method on the static Utl class formats a report header for the list of resources stored in an assembly from this template.</comment>
  </data>
  <data name="MESSAGE_UNEXPECTED_SETTINGS_TYPE" xml:space="preserve">
    <value>The type of Application Settings property type mismatch:{4}    Settings property name  = {0}{4}    Settings property type  = {1}{4}    Expected settings type  = {2}{4}    Settings property value = {3}{4}</value>
    <comment>From this template, an InvalidCastException exception message is constructed to report that the type of a property in the Application Settings collection differs from the type specified for the parameter in the application code.</comment>
  </data>
  <data name="OPERATING_PARAMETER_TOSTRING" xml:space="preserve">
    <value>{0}: InternalName = {1}{9}DisplayName = {2}{9}ParamValue = {3}{9}ParamType = {4}{9}HasDefaultValueInAppSettings = {5}{9}ParamState = {6}{9}ParamSource = {7}{9}SavedDefaultValue = {8}</value>
    <comment>The custom ToString implementation in the OperatingParameterBase class and its deriviatives use this string to render their output.</comment>
  </data>
  <data name="RENDERED_STRING_IS_EMPTY" xml:space="preserve">
    <value>[Empty]</value>
    <comment>Static method RenderStringValue returns this string to denote that the input string is the empty string.</comment>
  </data>
  <data name="RENDERED_STRING_IS_NULL" xml:space="preserve">
    <value>[Null]</value>
    <comment>Static method RenderStringValue returns this string to denote that the input string is a null reference.</comment>
  </data>
</root>